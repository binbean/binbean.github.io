<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Binbean&#39;s Blog</title>
    <link>https://binbean.github.io/</link>
    <description>Recent content on Binbean&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Nov 2019 14:58:12 +0800</lastBuildDate>
    
	<atom:link href="https://binbean.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Javascript中的encodeURI与encodeURIComponent</title>
      <link>https://binbean.github.io/post/javascript%E4%B8%AD%E7%9A%84encodeuri%E4%B8%8Eencodeuricomponent/</link>
      <pubDate>Tue, 19 Nov 2019 14:58:12 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/javascript%E4%B8%AD%E7%9A%84encodeuri%E4%B8%8Eencodeuricomponent/</guid>
      <description>Javascript中encodeURI和encodeURIComponent两个方法都是encode URI的，但是究竟有什么区别，下面将详</description>
    </item>
    
    <item>
      <title>Javascript Good Part读书笔记-JavaScript正则表达式</title>
      <link>https://binbean.github.io/post/javascript-good-part%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 14 Nov 2019 20:47:36 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/javascript-good-part%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>正则表达式（Regular Expressions） 例子 1 var parse_url = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.-A-Za-z]+) (?::(\d+))?(?:\/( (?#)))?(?:\?( (#)))?(?:#(.*))?$/; 解析 1 2 3 4 5 6 7 8 1 ^表示正则字符串开始 2 (?:([A-Za-z]+):)? 匹配schema（可选）</description>
    </item>
    
    <item>
      <title>Javascript Good Part读书笔记-JavaScript数组</title>
      <link>https://binbean.github.io/post/javascript-good-part%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 14 Nov 2019 20:40:02 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/javascript-good-part%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%95%B0%E7%BB%84/</guid>
      <description>数组（Arrays） JavaScript数组实际上是对象。 数组字面符 1 2 3 4 5 6 7 8 9 var empty = []; var numbers = [ &amp;#39;zero&amp;#39;, &amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;, &amp;#39;four&amp;#39;, &amp;#39;five&amp;#39;, &amp;#39;six&amp;#39;, &amp;#39;seven&amp;#39;, &amp;#39;eight&amp;#39;, &amp;#39;nine&amp;#39; ]; empty[1] // undefined numbers[1] // &amp;#39;one&amp;#39; empty.length //</description>
    </item>
    
    <item>
      <title>Javascript Good Part读书笔记-JavaScript继承</title>
      <link>https://binbean.github.io/post/javascript-good-part%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Thu, 14 Nov 2019 20:37:57 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/javascript-good-part%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%BB%A7%E6%89%BF/</guid>
      <description>继承（Inheritance） 伪类（Pseudoclassical） 当一个函数对象被创建时，这个函数的构造器会产生一个函数对象运行类似下面的</description>
    </item>
    
    <item>
      <title>Javascript Good Part读书笔记-JavaScript函数</title>
      <link>https://binbean.github.io/post/javascript-good-part%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 14 Nov 2019 20:34:08 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/javascript-good-part%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%87%BD%E6%95%B0/</guid>
      <description>函数（Functions） 函数对象（Function Objects） 在JavaScript中函数就是对象（Functions in Javascript are objec</description>
    </item>
    
    <item>
      <title>Javascript Good Part读书笔记-JavaScript对象</title>
      <link>https://binbean.github.io/post/javascript-good-part%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Thu, 14 Nov 2019 20:30:10 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/javascript-good-part%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%AF%B9%E8%B1%A1/</guid>
      <description>对象（Objects） 包括简单类型：number， string， boolean，null，undefined和对象类型两种。number， s</description>
    </item>
    
    <item>
      <title>Javascript Good Part读书笔记-JavaScript语法</title>
      <link>https://binbean.github.io/post/javascript-good-part%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Thu, 14 Nov 2019 20:27:06 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/javascript-good-part%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E8%AF%AD%E6%B3%95/</guid>
      <description>语法 空格（Whitespace） 注释方式，建议尽量使用行注释形式 行注释形式 // 块注释形式 /* */ 块注释形式有时候可能不安全，会引起语法错误 1 2 3 /*</description>
    </item>
    
    <item>
      <title>Javascript Good Part读书笔记-JavaScript方法</title>
      <link>https://binbean.github.io/post/javascript-good-part/</link>
      <pubDate>Sat, 02 Nov 2019 10:10:44 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/javascript-good-part/</guid>
      <description>方法（Methods） 数组（array） array.concat(item&amp;hellip;) 通过浅拷贝产生一个新的数组，并添加item到这个数组。 1 2 3 4 var a = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]; var b = [&amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;, &amp;#39;z&amp;#39;]; var c = a.concat(b, true); //</description>
    </item>
    
    <item>
      <title>常用java代码片段</title>
      <link>https://binbean.github.io/post/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</link>
      <pubDate>Fri, 06 Sep 2019 22:36:27 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</guid>
      <description>常用Java代码片段 检查空对象 1 2 3 if (Objects.isNull(obj)) { return null; } 检查字符串为空 1 2 3 if (Objects.isNull(string) || string.isEmpty()) { return null; } 检查列表为空 1 2 3 if (CollectionUtils.isEmpty(list)) { return Collections.emptyList(); } 检查对象相等 1 Objects.equals(name, thisName); Map遍</description>
    </item>
    
    <item>
      <title>Nginx命令及配置</title>
      <link>https://binbean.github.io/post/nginx/</link>
      <pubDate>Fri, 02 Aug 2019 10:10:44 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/nginx/</guid>
      <description>命令 常用命令 1 nginx -s signal signal为下列中的一个 stop — 关闭服务 quit — 等待已经接受的请求处理完后关闭服务 reload — 重新加载配置文件 reopen — 重新打开日志文件 命令</description>
    </item>
    
    <item>
      <title>Java多线程实现原理(源码阅读)</title>
      <link>https://binbean.github.io/post/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Fri, 12 Jul 2019 10:10:44 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>Thread，Runable Thread源码 1 2 3 4 5 public class Thread implements Runnable { /* What will be run. */ private Runnable target; ... } 当Thread通过Runable作为构造参数创建时，</description>
    </item>
    
    <item>
      <title>Docker常用命令</title>
      <link>https://binbean.github.io/post/docker%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 02 Jun 2019 10:10:44 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/docker%E5%9F%BA%E7%A1%80/</guid>
      <description>Docker 基础 List Docker CLI commands 1 2 docker docker container --help Display Docker version and info 1 2 3 docker --version docker version docker info Execute Docker image 1 docker run hello-world Image List Docker images 1 docker image ls Save and load image Save 1 docker save -o dockerName.tar username/repository:tag 示例： 1 2 # save docker save -o quay.io-calico-node-1.tar quay.io/calico/node:v1.0 Load docker load -i dockerName.tar</description>
    </item>
    
    <item>
      <title>Maven中设置Java版本</title>
      <link>https://binbean.github.io/post/maven%E4%B8%AD%E8%AE%BE%E7%BD%AEjava%E7%89%88%E6%9C%AC/</link>
      <pubDate>Wed, 10 Apr 2019 22:36:27 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/maven%E4%B8%AD%E8%AE%BE%E7%BD%AEjava%E7%89%88%E6%9C%AC/</guid>
      <description>yaml语法Maven中设置Java版本 使用Compiler Plugin Maven Compiler 命令接受 -source 和 - target 版本参数，默认情况，两个参数都为1.6 1 2 3 4 &amp;lt;properties&amp;gt; &amp;lt;maven.compiler.target&amp;gt;1.8&amp;lt;/maven.compiler.target&amp;gt; &amp;lt;maven.compiler.source&amp;gt;1.8&amp;lt;/maven.compiler.source&amp;gt; &amp;lt;/properties&amp;gt; 1 2</description>
    </item>
    
    <item>
      <title>安全证书(编码格式、证书标准)</title>
      <link>https://binbean.github.io/post/%E8%AF%81%E4%B9%A6certificate/</link>
      <pubDate>Wed, 13 Mar 2019 10:10:44 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/%E8%AF%81%E4%B9%A6certificate/</guid>
      <description>编码标准 ASN.1(Abstrcat Syntax Notation One) 是描述数据的表示、编码、传输、解码的灵活的记法。它提供了一套正式、无歧义和精确的规则以描述独立于特定计算机硬件的对象结构。 标</description>
    </item>
    
    <item>
      <title>Java8学习系列聚合地址</title>
      <link>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E8%81%9A%E5%90%88%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Tue, 25 Sep 2018 11:03:20 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E8%81%9A%E5%90%88%E5%9C%B0%E5%9D%80/</guid>
      <description>Java8学习系列聚合地址： Java8学习一 通过行为参数化传递代码 Java8学习二 Lambda表达式 Java8学习三 Stream之认识流 Ja</description>
    </item>
    
    <item>
      <title>Java8学习六 新的日期和时间API</title>
      <link>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E5%85%AD-%E6%96%B0%E7%9A%84%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4api/</link>
      <pubDate>Sat, 22 Sep 2018 21:12:59 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E5%85%AD-%E6%96%B0%E7%9A%84%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4api/</guid>
      <description>现有API存在问题 Date类 Java 1.0版本，java.util.Date。 无法表示日期，只能以毫秒的精度表示 年份起始为1900，月份起始为0 C</description>
    </item>
    
    <item>
      <title>Java8学习五 Stream之使用流收集数据</title>
      <link>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E4%BA%94-stream%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%B5%81%E6%94%B6%E9%9B%86%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 06 Sep 2018 22:36:27 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E4%BA%94-stream%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%B5%81%E6%94%B6%E9%9B%86%E6%95%B0%E6%8D%AE/</guid>
      <description>具体地说，流收集器是对流调用collect方法将对流中的元素触发一个归约操作（ 由Collector来参数化）。 归约和汇总 计数counting</description>
    </item>
    
    <item>
      <title>Java8学习四 Stream之使用流</title>
      <link>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E5%9B%9B-stream%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%B5%81/</link>
      <pubDate>Tue, 04 Sep 2018 21:55:07 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E5%9B%9B-stream%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%B5%81/</guid>
      <description>筛选和切片 用谓词筛选-filter 1 2 3 menu.stream() .filter(Dish::isVegetarian) .collect(Collectors.toList()); 取重-distinct 1 2 3 4 5 List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1, 2, 1, 3, 3, 2, 4); numbers.stream() .filter(integer -&amp;gt; integer % 2 == 0) .distinct() .forEach(System.out:: println); 截短流-limit 1</description>
    </item>
    
    <item>
      <title>Java8学习三 Stream之认识流</title>
      <link>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E4%B8%89-stream%E4%B9%8B%E8%AE%A4%E8%AF%86%E6%B5%81/</link>
      <pubDate>Sun, 02 Sep 2018 10:10:44 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E4%B8%89-stream%E4%B9%8B%E8%AE%A4%E8%AF%86%E6%B5%81/</guid>
      <description>流式是什么 流是Java API新成员，允许以声明的方式处理数据集合。主要特点： 流水线-多个操作可以链接起来形成一个流水线 内部迭代 比如：获取卡路</description>
    </item>
    
    <item>
      <title>Java8学习二 Lambda表达式</title>
      <link>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E4%BA%8C-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 30 Aug 2018 23:15:03 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E4%BA%8C-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>什么是Lambda表达式 Lambda表达式可以理解为一种匿名函数：没有名称，但有参数列表、函数体和返回类型，可能还有一个可抛出异常列表 Lam</description>
    </item>
    
    <item>
      <title>Java8学习一 通过行为参数化传递代码</title>
      <link>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E4%B8%80-%E9%80%9A%E8%BF%87%E8%A1%8C%E4%B8%BA%E5%8F%82%E6%95%B0%E5%8C%96%E4%BC%A0%E9%80%92%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 29 Aug 2018 21:00:13 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/java8%E5%AD%A6%E4%B9%A0%E4%B8%80-%E9%80%9A%E8%BF%87%E8%A1%8C%E4%B8%BA%E5%8F%82%E6%95%B0%E5%8C%96%E4%BC%A0%E9%80%92%E4%BB%A3%E7%A0%81/</guid>
      <description>什么是行为参数化？ 一个方法接收多个不同的行为作为参数，并在内部使用它们，完成不同行为的能力。 有什么好处？ 让代码更好的适应不断变化的要求，对付</description>
    </item>
    
    <item>
      <title>yaml语法</title>
      <link>https://binbean.github.io/post/yaml%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 29 Aug 2018 21:00:13 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/yaml%E8%AF%AD%E6%B3%95/</guid>
      <description>简介 语法规则 大小写敏感 使用缩进表示层级关系 缩进时不允许使用Tab键，只允许使用空格。 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可 # 表</description>
    </item>
    
    <item>
      <title>Spring中的@RequestBody与Content Type及Form表单提交</title>
      <link>https://binbean.github.io/post/spring%E4%B8%AD%E7%9A%84requestbody%E4%B8%8Econtent-type%E5%8F%8Aform%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4/</link>
      <pubDate>Wed, 22 Aug 2018 21:16:16 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/spring%E4%B8%AD%E7%9A%84requestbody%E4%B8%8Econtent-type%E5%8F%8Aform%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4/</guid>
      <description>@RequestBody注解 Spring中@RequestBody注解，用于读取Request请求的body数据，并根据内容类型（Conte</description>
    </item>
    
    <item>
      <title>Java内省及注解</title>
      <link>https://binbean.github.io/post/java%E5%86%85%E7%9C%81%E5%8F%8A%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Tue, 21 Aug 2018 20:45:07 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/java%E5%86%85%E7%9C%81%E5%8F%8A%E6%B3%A8%E8%A7%A3/</guid>
      <description>内省 内省(IntroSpector)是Java语言对JavaBean类的属性、事件及方法的处理。JavaBean主要用于传递数据信息，通常被</description>
    </item>
    
    <item>
      <title>Java泛型</title>
      <link>https://binbean.github.io/post/java%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Sun, 19 Aug 2018 20:51:04 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/java%E6%B3%9B%E5%9E%8B/</guid>
      <description>1 泛型接口 1.1 接口定义 interface 接口名称&amp;lt;泛型标识&amp;gt;{} 1 2 3 4 5 // 在接口上定义泛型 interface Info&amp;lt;T&amp;gt;{ // 定义抽象方法，抽象方法的返回泛型类型的值 public T getVar() ;</description>
    </item>
    
    <item>
      <title>Spring Boot中的ConfigurationProperties使用</title>
      <link>https://binbean.github.io/post/spring-boot%E4%B8%AD%E7%9A%84configurationproperties%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 17 Aug 2018 23:25:00 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/spring-boot%E4%B8%AD%E7%9A%84configurationproperties%E4%BD%BF%E7%94%A8/</guid>
      <description>在Spring Boot项目中从配置文件读取配置信息到类中使用通常有两种方式：@ConfigurationProperties 和 @Value。</description>
    </item>
    
    <item>
      <title>添加Gitment评论</title>
      <link>https://binbean.github.io/post/%E6%B7%BB%E5%8A%A0gitment%E8%AF%84%E8%AE%BA/</link>
      <pubDate>Fri, 17 Aug 2018 22:57:12 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/%E6%B7%BB%E5%8A%A0gitment%E8%AF%84%E8%AE%BA/</guid>
      <description>注册 前往https://github.com/settings/applications/new注册一个新的OAuth Application</description>
    </item>
    
    <item>
      <title>Sping Cloud中的各种超时配置</title>
      <link>https://binbean.github.io/post/sping-cloud%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E8%B6%85%E6%97%B6%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 16 Aug 2018 20:29:23 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/sping-cloud%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D%E8%B6%85%E6%97%B6%E9%85%8D%E7%BD%AE/</guid>
      <description>Ribbon超时 全局设置 1 2 3 4 5 6 7 8 9 ribbon: ReadTimeout: 10000 ConnectTimeout: 10000 #对当前服务的重试次数 MaxAutoRetries: 0 #切换相同Server的次数 MaxAutoRetriesNextServer: 1 eureka: enabled: true 源码org.spring</description>
    </item>
    
    <item>
      <title>Spring RestTemplate拦截器</title>
      <link>https://binbean.github.io/post/spring-resttemplate%E6%8B%A6%E6%88%AA%E5%99%A8/</link>
      <pubDate>Wed, 15 Aug 2018 22:43:45 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/spring-resttemplate%E6%8B%A6%E6%88%AA%E5%99%A8/</guid>
      <description>在Spring中， RestTemplate作为客户端向Restful API接口发送请求的工具类，通常需要对请求设置相似或者相同的Http He</description>
    </item>
    
    <item>
      <title>Spring Security OAuth2获取Access Token的方式</title>
      <link>https://binbean.github.io/post/spring-security-oauth2%E8%8E%B7%E5%8F%96access-token%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 15 Aug 2018 20:30:11 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/spring-security-oauth2%E8%8E%B7%E5%8F%96access-token%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>本文主要以客户端认证模式（client_credentials）作为样例实现学习，其它认证模式类似。 RestTemplate接口 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>Spring Security OAuth2学习</title>
      <link>https://binbean.github.io/post/spring-security-oauth2%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 13 Aug 2018 20:41:25 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/spring-security-oauth2%E5%AD%A6%E4%B9%A0/</guid>
      <description>认证方式 客户端授权（Client Credentials Grant） 1 2 3 POST /oauth/token?grant_type=client_credentials HTTP/1.1 Host: server.example.com Authorization: Basic Y2xpZW50X2F1dGhfbW9kZToxMjM0NTY= 在mysql中建立表：oauth_client_details 请求头Au</description>
    </item>
    
    <item>
      <title>JPA 映射关系</title>
      <link>https://binbean.github.io/post/jpa-%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Sun, 29 Jul 2018 21:28:20 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/jpa-%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB/</guid>
      <description>JPA 映射关系 单向关联 @OneToMany 一对多的单向关联，只需在代表一的实体(Author)中使用@OneToMany映射标注就可以了，代表多的实体不需要使用任</description>
    </item>
    
    <item>
      <title>电商系统中常用的加密方式及流程</title>
      <link>https://binbean.github.io/post/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F%E5%8F%8A%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Fri, 22 Jun 2018 11:55:20 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F%E5%8F%8A%E6%B5%81%E7%A8%8B/</guid>
      <description>公共密钥加密系统 “公钥加密私钥解密”，通常称之为“公共密钥加密系统”。利用公钥进行加密，而用私钥解密，这种场景属于数据保护，数据传输过程中都</description>
    </item>
    
    <item>
      <title>Kubernetes环境搭建</title>
      <link>https://binbean.github.io/post/kubernetes%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 15 Jun 2018 10:10:44 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/kubernetes%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>Docker安装 环境：CentOS/RHEL 7.4+ Install prerequisites. 1 yum install -y yum-utils device-mapper-persistent-data lvm2 Add docker repository. 1 2 3 yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo Install docker. 1 yum update &amp;amp;&amp;amp; yum install -y docker-ce-18.06.1.ce Create /etc/docker directory. 1 mkdir /etc/docker Setup daemon. 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>发布Maven构件到中央仓库</title>
      <link>https://binbean.github.io/post/%E5%8F%91%E5%B8%83maven%E6%9E%84%E4%BB%B6%E5%88%B0%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</link>
      <pubDate>Tue, 05 Jun 2018 20:18:26 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/%E5%8F%91%E5%B8%83maven%E6%9E%84%E4%BB%B6%E5%88%B0%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</guid>
      <description>准备工作 GitHub上传项目 注册https://issues.sonatype.org账号 安装OpenGPG，通过GnuGPG来 创建一个公钥</description>
    </item>
    
    <item>
      <title>Hello Hugo</title>
      <link>https://binbean.github.io/post/hello-hugo/</link>
      <pubDate>Thu, 31 May 2018 20:19:24 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/hello-hugo/</guid>
      <description>新建文章 1 hugo new post/blog-name.md 运行hugo 1 hugo server --watch --buildDrafts 部署到GitHub Pages 1 2 hugo -D hugo --theme=hyde --baseUrl=&amp;#34;http://binbean.github.io/&amp;#34; 1 2 3 4 5 6 cd public git init git remote add origin https://github.com/binbean/binbean.github.io.git git add -A git commit -m &amp;#34;first commit&amp;#34; git push -u origin master</description>
    </item>
    
    <item>
      <title>IDEA SVN Https证书问题</title>
      <link>https://binbean.github.io/post/idea-svn-https%E8%AF%81%E4%B9%A6%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 31 May 2018 20:17:47 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/idea-svn-https%E8%AF%81%E4%B9%A6%E9%97%AE%E9%A2%98/</guid>
      <description>IDEA SVN https 证书问题 问题： svn: E230001: Server SSL certificate verification failed: certificate issued for a different hostname, issuer is not trusted 解决方法 Mac 打开 Terminal（终端），windows 打开cmd（ 命令行）执行下面命令</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://binbean.github.io/about/</link>
      <pubDate>Thu, 31 May 2018 18:55:19 +0800</pubDate>
      
      <guid>https://binbean.github.io/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>加密算法</title>
      <link>https://binbean.github.io/post/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 24 Mar 2018 10:10:44 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</guid>
      <description>对称加密 定义 对称加密(也叫私钥加密)指加密和解密使用相同密钥的加密算法。 优点 计算量小、加密速度快、加密效率高 缺点 交易双方都使用同样钥匙，安全</description>
    </item>
    
    <item>
      <title>https证书生成</title>
      <link>https://binbean.github.io/post/https%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90/</link>
      <pubDate>Thu, 22 Mar 2018 10:10:44 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/https%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90/</guid>
      <description>生成CA证书 1 2 # 1 生成 CA 私钥 openssl genrsa -out ca.key 1024 1 2 # 2 X.509 Certificate Signing Request (CSR) Management. openssl req -new -key ca.key -out ca.csr ➜ keys openssl req -new -key ca.key -out ca.csr You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is</description>
    </item>
    
    <item>
      <title>CA证书学习-生成及管理</title>
      <link>https://binbean.github.io/post/ca%E8%AF%81%E4%B9%A6%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 18 Mar 2018 10:10:44 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/ca%E8%AF%81%E4%B9%A6%E6%90%AD%E5%BB%BA/</guid>
      <description>什么是CA CA（Certification Authority），内容包括：电子签证机关的信息、公钥用户信息、公钥、权威机构的签字和有效期等。</description>
    </item>
    
    <item>
      <title>cfssl命令学习-生成证书</title>
      <link>https://binbean.github.io/post/cfssl%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6/</link>
      <pubDate>Fri, 16 Mar 2018 10:10:44 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/cfssl%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6/</guid>
      <description>准备cfssl环境 1 2 3 4 wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O /usr/local/bin/cfssl wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O /usr/local/bin/cfssljson wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O /usr/local/bin/cfssl-certinfo chmod +x /usr/local/bin/cfssl* 生成ca证书 证书配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 cat &amp;gt; ca-config.json &amp;lt;&amp;lt;EOF { &amp;#34;signing&amp;#34;: { &amp;#34;default&amp;#34;: { &amp;#34;expiry&amp;#34;: &amp;#34;8760h&amp;#34; },</description>
    </item>
    
    <item>
      <title>openssl命令学习</title>
      <link>https://binbean.github.io/post/openssl%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 11 Mar 2018 10:10:44 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/openssl%E5%91%BD%E4%BB%A4/</guid>
      <description>openssl命令分为三类（openssl help）：Standard commands(标准命令),Message Digest commands(消息摘</description>
    </item>
    
    <item>
      <title>Git基础操作-远程仓库</title>
      <link>https://binbean.github.io/post/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link>
      <pubDate>Sat, 22 Jun 2013 22:55:20 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid>
      <description>查看当前的远程仓库 命令： -v 选项显示对应的克隆地址 1 git remote 例子： 1 2 git remote git remote -v 添加到远程仓库 命令： 1 git remote add [shortname] [url] 1 例子： 1 git remote add pb git://github.com/binbean/ticgit.git 推送数据到远程</description>
    </item>
    
    <item>
      <title>Git基础操作-本地仓库操作</title>
      <link>https://binbean.github.io/post/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 21 Jun 2013 22:31:20 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E6%93%8D%E4%BD%9C/</guid>
      <description>配置 三个不同的地方,每一个级别都会覆盖上层配置。 * /etc/gitconfig, 系统中所有用户配置。使用git config时用&amp;ndash;system选项，读写该文件</description>
    </item>
    
  </channel>
</rss>