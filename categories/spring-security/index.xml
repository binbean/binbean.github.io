<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Security on 豆子.学习笔记</title>
    <link>https://binbean.github.io/categories/spring-security/</link>
    <description>Recent content in Spring Security on 豆子.学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 15 Aug 2018 20:30:11 +0800</lastBuildDate>
    
	<atom:link href="https://binbean.github.io/categories/spring-security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Security OAuth2获取Access Token的方式</title>
      <link>https://binbean.github.io/post/spring-security-oauth2%E8%8E%B7%E5%8F%96access-token%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 15 Aug 2018 20:30:11 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/spring-security-oauth2%E8%8E%B7%E5%8F%96access-token%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>本文主要以客户端认证模式（client_credentials）作为样例实现学习，其它认证模式类似。
RestTemplate接口 MultiValueMap&amp;lt;String, String&amp;gt; params = new LinkedMultiValueMap&amp;lt;&amp;gt;(); params.add(&amp;quot;grant_type&amp;quot;, &amp;quot;client_credentials&amp;quot;); params.add(&amp;quot;client_id&amp;quot;, &amp;quot;your_client_id&amp;quot;); params.add(&amp;quot;client_secret&amp;quot;, &amp;quot;your_client_secret&amp;quot;); String result = new RestTemplate().postForObject(oauth2ClientProperties.getAccessTokenUrl(), params, String.class); String accessToken = JSON.parseObject(result).getString(&amp;quot;access_token&amp;quot;);  OAuth2RestTemplate接口 @Bean(&amp;quot;clientCredentialsResourceDetails&amp;quot;) public ClientCredentialsResourceDetails resourceDetails() { ClientCredentialsResourceDetails details = new ClientCredentialsResourceDetails(); //http://localhost:${server.port}/oauth/token details.setAccessTokenUri(&amp;quot;your_access_token_uri&amp;quot;); details.setClientId(&amp;quot;your_client_id&amp;quot;); details.setClientSecret(&amp;quot;your_client_secret&amp;quot;); details.setAuthenticationScheme(AuthenticationScheme.header); return details; } @Bean(&amp;quot;oAuth2RestTemplate&amp;quot;) public OAuth2RestTemplate oAuth2RestTemplate() { final OAuth2RestTemplate oAuth2RestTemplate = new OAuth2RestTemplate(resourceDetails(), new DefaultOAuth2ClientContext()); //default: SimpleClientHttpRequestFactory oAuth2RestTemplate.setRequestFactory(new Netty4ClientHttpRequestFactory()); return oAuth2RestTemplate; } OAuth2RestTemplate oAuth2RestTemplate = oAuth2RestTemplate(); String accessToken = oAuth2RestTemplate.</description>
    </item>
    
    <item>
      <title>Spring Security OAuth2学习</title>
      <link>https://binbean.github.io/post/spring-security-oauth2%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 13 Aug 2018 10:41:25 +0800</pubDate>
      
      <guid>https://binbean.github.io/post/spring-security-oauth2%E5%AD%A6%E4%B9%A0/</guid>
      <description>认证方式  客户端授权（Client Credentials Grant）   POST /oauth/token?grant_type=client_credentials HTTP/1.1 Host: server.example.com Authorization: Basic Y2xpZW50X2F1dGhfbW9kZToxMjM0NTY=   在mysql中建立表：oauth_client_details 请求头Authorization，key=Authorization；value=Basic+空格+Base64(username:password)，Basic后面的信息由[username:password]内的字符Base64加密而成。 username和password分别为oauth_client_details表中的client_id和client_secret，也就是客户端模式下的标识客户端的凭证(用以区别是哪种受信任的客户端)，对应OAuth2映射为ClientDetails对象。   密码授权   POST /token HTTP/1.1 Host: server.example.com Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW Content-Type: application/x-www-form-urlencoded grant_type=password&amp;amp;username=johndoe&amp;amp;password=A3ddj3w   请求头Authorization，key=Authorization；value=Basic+空格+Base64(username:password)，Basic后面的信息由[username:password]内的字符Base64加密而成。 username和password依旧为oauth_client_details表中的client_id和client_secret，也就是客户端模式下的标识客户端的凭证(用以区别是哪种受信任的客户端)，对应OAuth2映射为DetailDetails对象。 与客户端模式相比多参数:username和password，在于密码模式下，Spring-Security-Oauth2中，有个叫做UserDetails的对象。 在客户端模式下，需要对ClientDetails对象进行认证；而在密码模式下，则既需要对ClientDetails对象认证，也需要对UserDetails对象认证。  认证配置 认证管理信息的配置主要是针对ClientDetails和UserDetails对象的检查，客户端模式针对ClientDetails检查，而密码模式则先检查ClientDetails后检查UserDetails对象。 认证授权配置如下
@Configuration @EnableAuthorizationServer//开启配置 OAuth 2.0 认证授权服务 public class AuthAuthorizeConfig extends AuthorizationServerConfigurerAdapter { @Autowired DataSource dataSource; @Autowired private AuthenticationManager authenticationManager; @Autowired private TokenStore tokenStore; @Autowired private CustomUserDetailsService userDetailsService; /** * 配置 oauth_client_details【client_id和client_secret等】信息的认证【检查ClientDetails的合法性】服务 * 设置 认证信息的来源：数据库 (可选项：数据库和内存,使用内存一般用来作测试) * 自动注入：ClientDetailsService的实现类 JdbcClientDetailsService (检查 ClientDetails 对象) */ @Override public void configure(ClientDetailsServiceConfigurer clients) throws Exception { clients.</description>
    </item>
    
  </channel>
</rss>